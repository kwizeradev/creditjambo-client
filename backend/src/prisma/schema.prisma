generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  name         String
  passwordHash String
  salt         String
  role         Role        @default(USER)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  devices      Device[]
  accounts     Account[]
  sessions     Session[]
  pushTokens   PushToken[]

  @@index([email])
  @@map("users")
}

model Device {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId   String    @unique
  deviceInfo String?
  verified   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  sessions   Session[]

  @@index([userId])
  @@index([deviceId])
  @@index([verified])
  @@map("devices")
}

model Account {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      Decimal       @default(0) @db.Decimal(15, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String          @id @default(uuid())
  accountId   String
  account     Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  type        TransactionType
  amount      Decimal         @db.Decimal(15, 2)
  description String?
  createdAt   DateTime        @default(now())

  @@index([accountId])
  @@index([createdAt])
  @@index([type])
  @@map("transactions")
}

model Session {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId         String
  device           Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  refreshTokenHash String
  lastActivityAt   DateTime @default(now())
  expiresAt        DateTime
  createdAt        DateTime @default(now())

  @@index([userId])
  @@index([deviceId])
  @@index([expiresAt])
  @@map("sessions")
}

model PushToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  platform  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("push_tokens")
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}
